#include <iostream>
#include <chrono>
#include <fstream>
#include <random>
#include "../include/gaussian.h"

constexpr unsigned int SEED = 52;

void generate_random_system(double** a, double* y, int n, unsigned int seed) {
    std::mt19937 gen(seed);
    std::uniform_real_distribution<> dis(1.0, 10.0); // –¢–û–õ–¨–ö–û –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏—Å—Ç–∏–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    double* x_true = new double[n];
    for (int i = 0; i < n; i++) {
        x_true[i] = dis(gen);
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞—Ç—Ä–∏—Ü—É
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            a[i][j] = dis(gen);
        }
        // –£—Å–∏–ª–∏–≤–∞–µ–º –¥–∏–∞–≥–æ–Ω–∞–ª—å –≤ 10 —Ä–∞–∑
        a[i][i] = dis(gen) * n * 10.0;
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∞–≤—É—é —á–∞—Å—Ç—å: y = A * x_true
    for (int i = 0; i < n; i++) {
        y[i] = 0;
        for (int j = 0; j < n; j++) {
            y[i] += a[i][j] * x_true[j];
        }
    }
    
    delete[] x_true;
}

void copy_system(double** dest_a, double* dest_y, double** src_a, double* src_y, int n) {
    for (int i = 0; i < n; i++) {
        dest_y[i] = src_y[i];
        for (int j = 0; j < n; j++) {
            dest_a[i][j] = src_a[i][j];
        }
    }
}

int main() {
    const int n = 10000; // –†–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∏—Ü—ã
    const int num_runs = 2; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–æ–Ω–æ–≤ –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
    int thread_counts[] = {1, 2, 3, 4, 6, 8, 12, 16};
    
    std::cout << "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n";
    std::cout << "‚ïë   –ë–ï–ù–ß–ú–ê–†–ö –ú–ï–¢–û–î–ê –ì–ê–£–°–°–ê –° THREAD POOL                 ‚ïë\n";
    std::cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n";
    
    std::cout << "üìä –†–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∏—Ü—ã: " << n << "√ó" << n << std::endl;
    std::cout << "üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–æ–Ω–æ–≤: " << num_runs << std::endl;
    std::cout << "‚öôÔ∏è  –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ";
    for (int t : thread_counts) {
        std::cout << t << " ";
    }
    std::cout << "\n\n";
    
    // –°–æ–∑–¥–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    double **original_a = new double*[n];
    double *original_y = new double[n];
    for (int i = 0; i < n; i++) {
        original_a[i] = new double[n];
    }
    
    std::cout << "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...\n";
    generate_random_system(original_a, original_y, n, SEED);
    std::cout << "–°–∏—Å—Ç–µ–º–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n";
    
    // –§–∞–π–ª –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    std::ofstream results("benchmark_results.txt");
    results << "# threads time_seconds\n";
    
    std::cout << "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
    std::cout << " –ü–æ—Ç–æ–∫–æ–≤ ‚îÇ –í—Ä–µ–º—è (—Å–µ–∫) ‚îÇ –£—Å–∫–æ—Ä–µ–Ω–∏–µ ‚îÇ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ‚îÇ –°—Ç–∞—Ç—É—Å\n";
    std::cout << "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n";
    
    double time_single_thread = 0;
    
    for (int num_threads : thread_counts) {
        double total_time = 0;
        
        std::cout << "    " << num_threads << "    ‚îÇ ";
        std::cout.flush();
        
        for (int run = 0; run < num_runs; run++) {
            // –ö–æ–ø–∏—è —Å–∏—Å—Ç–µ–º—ã
            double **a = new double*[n];
            double *y = new double[n];
            for (int i = 0; i < n; i++) {
                a[i] = new double[n];
            }
            copy_system(a, y, original_a, original_y, n);
            
            // –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è
            auto start = std::chrono::high_resolution_clock::now();
            
            // –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –≤ —Ñ—É–Ω–∫—Ü–∏—é
            double* x = gauss(a, y, n, num_threads);
            
            auto end = std::chrono::high_resolution_clock::now();
            
            std::chrono::duration<double> elapsed = end - start;
            total_time += elapsed.count();
            
            // –û—á–∏—Å—Ç–∫–∞
            if (x) delete[] x;
            for (int i = 0; i < n; i++) {
                delete[] a[i];
            }
            delete[] a;
            delete[] y;
        }
        
        double avg_time = total_time / num_runs;
        
        if (num_threads == 1) {
            time_single_thread = avg_time;
        }
        
        double speedup = time_single_thread / avg_time;
        double efficiency = (speedup / num_threads) * 100.0;
        
        printf("%10.4f ‚îÇ  %7.2fx ‚îÇ    %6.1f%%    ‚îÇ ", avg_time, speedup, efficiency);
        
        if (efficiency > 80) {
            std::cout << "üü¢ –û—Ç–ª–∏—á–Ω–æ\n";
        } else if (efficiency > 60) {
            std::cout << "üü° –•–æ—Ä–æ—à–æ\n";
        } else if (efficiency > 40) {
            std::cout << "üü† –°—Ä–µ–¥–Ω–µ\n";
        } else {
            std::cout << "üî¥ –ü–ª–æ—Ö–æ\n";
        }
        
        results << num_threads << " " << avg_time << "\n";
    }
    
    std::cout << "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n";
    
    results.close();
    
    // –û—á–∏—Å—Ç–∫–∞
    for (int i = 0; i < n; i++) {
        delete[] original_a[i];
    }
    delete[] original_a;
    delete[] original_y;
    
    std::cout << "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ 'benchmark_results.txt'\n";
    
    return 0;
}